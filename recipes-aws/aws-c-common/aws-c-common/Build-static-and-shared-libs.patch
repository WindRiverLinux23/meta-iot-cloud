From 7ccc534dd31b242a9f665d84a94d3696e37e5d9a Mon Sep 17 00:00:00 2001
From: Scott Ware <scott.r.ware@intel.com>
Date: Mon, 26 Apr 2021 17:02:59 +0100
Subject: [PATCH] Build static and shared libs

Signed-off-by: Scott Ware <scott.r.ware@intel.com>
---
 CMakeLists.txt                  | 34 +++++++++++++++++++++++++--------
 cmake/aws-c-common-config.cmake |  6 +-----
 2 files changed, 27 insertions(+), 13 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index a8f0a1d..a277065 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -148,26 +148,39 @@ file(GLOB COMMON_SRC
         )
 
 
-add_library(${PROJECT_NAME} ${COMMON_SRC})
+add_library(${PROJECT_NAME} SHARED ${COMMON_SRC})
+add_library(${PROJECT_NAME}_static STATIC ${COMMON_SRC})
+
 aws_set_common_properties(${PROJECT_NAME} NO_WEXTRA)
 aws_prepare_symbol_visibility_args(${PROJECT_NAME} "AWS_COMMON")
 target_compile_options(${PROJECT_NAME} PUBLIC ${PLATFORM_CFLAGS})
 
+aws_set_common_properties(${PROJECT_NAME}_static NO_WEXTRA)
+aws_prepare_symbol_visibility_args(${PROJECT_NAME}_static "AWS_COMMON")
+target_compile_options(${PROJECT_NAME}_static PUBLIC ${PLATFORM_CFLAGS})
+
 aws_check_headers(${PROJECT_NAME} ${AWS_COMMON_HEADERS} ${AWS_TEST_HEADERS} ${AWS_COMMON_OS_HEADERS})
+aws_check_headers(${PROJECT_NAME}_static ${AWS_COMMON_HEADERS} ${AWS_TEST_HEADERS} ${AWS_COMMON_OS_HEADERS})
 
 #apple source already includes the definitions we want, and setting this posix source
 #version causes it to revert to an older version. So don't turn it on there, we don't need it.
 if (UNIX AND NOT APPLE AND NOT ${CMAKE_SYSTEM_NAME} MATCHES FreeBSD)
     #this only gets applied to aws-c-common (not its consumers).
     target_compile_definitions(${PROJECT_NAME} PRIVATE -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=500)
+    target_compile_definitions(${PROJECT_NAME}_static PRIVATE -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=500)
 endif()
 
 aws_set_thread_affinity_method(${PROJECT_NAME})
+aws_set_thread_affinity_method(${PROJECT_NAME}_static)
 
 aws_add_sanitizers(${PROJECT_NAME} BLACKLIST "sanitizer-blacklist.txt")
 target_link_libraries(${PROJECT_NAME} PUBLIC ${PLATFORM_LIBS})
 target_compile_definitions(${PROJECT_NAME} PRIVATE ${PLATFORM_DEFINES})
 
+aws_add_sanitizers(${PROJECT_NAME}_static BLACKLIST "sanitizer-blacklist.txt")
+target_link_libraries(${PROJECT_NAME}_static PUBLIC ${PLATFORM_LIBS})
+target_compile_definitions(${PROJECT_NAME}_static PRIVATE ${PLATFORM_DEFINES})
+
 if (AWS_NUM_CPU_CORES)
     target_compile_definitions(${PROJECT_NAME} PRIVATE -DAWS_NUM_CPU_CORES=${AWS_NUM_CPU_CORES})
 endif()
@@ -175,20 +188,30 @@ endif()
 set_target_properties(${PROJECT_NAME} PROPERTIES VERSION 1.0.0)
 set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 1)
 
+set_target_properties(${PROJECT_NAME}_static PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
+
 target_include_directories(${PROJECT_NAME} PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
         $<INSTALL_INTERFACE:include>)
+target_include_directories(${PROJECT_NAME}_static PUBLIC
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+        $<INSTALL_INTERFACE:include>)
 # When we install, the generated header will be at the INSTALL_INTERFACE:include location,
 # but at build time we need to explicitly include this here
 target_include_directories(${PROJECT_NAME} PUBLIC
         $<BUILD_INTERFACE:${GENERATED_INCLUDE_DIR}>)
+target_include_directories(${PROJECT_NAME}_static PUBLIC
+        $<BUILD_INTERFACE:${GENERATED_INCLUDE_DIR}>)
 
 # Enable SIMD encoder if the compiler supports the right features
 simd_add_definitions(${PROJECT_NAME})
+simd_add_definitions(${PROJECT_NAME}_static)
 
 if (HAVE_AVX2_INTRINSICS)
     target_compile_definitions(${PROJECT_NAME} PRIVATE -DUSE_SIMD_ENCODING)
     simd_add_source_avx2(${PROJECT_NAME} "source/arch/intel/encoding_avx2.c")
+    target_compile_definitions(${PROJECT_NAME}_static PRIVATE -DUSE_SIMD_ENCODING)
+    simd_add_source_avx2(${PROJECT_NAME}_static "source/arch/intel/encoding_avx2.c")
     message(STATUS "Building SIMD base64 decoder")
 endif()
 
@@ -223,19 +246,14 @@ foreach(HEADER_SRCPATH IN ITEMS ${AWS_COMMON_HEADERS} ${AWS_COMMON_OS_HEADERS} $
 endforeach()
 
 aws_prepare_shared_lib_exports(${PROJECT_NAME})
+aws_prepare_shared_lib_exports(${PROJECT_NAME}_static)
 
 configure_file("cmake/${PROJECT_NAME}-config.cmake"
   "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
   @ONLY)
 
-if (BUILD_SHARED_LIBS)
-   set (TARGET_DIR "shared")
-else()
-   set (TARGET_DIR "static")
-endif()
-
 install(EXPORT "${PROJECT_NAME}-targets"
-    DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake/${TARGET_DIR}"
+    DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake"
     NAMESPACE AWS::
     COMPONENT Development)
 
diff --git a/cmake/aws-c-common-config.cmake b/cmake/aws-c-common-config.cmake
index e495210..4d53894 100644
--- a/cmake/aws-c-common-config.cmake
+++ b/cmake/aws-c-common-config.cmake
@@ -4,9 +4,5 @@ if(WIN32 OR UNIX OR APPLE)
     find_package(Threads REQUIRED)
 endif()
 
-if (BUILD_SHARED_LIBS)
-    include(${CMAKE_CURRENT_LIST_DIR}/shared/@PROJECT_NAME@-targets.cmake)
-else()
-    include(${CMAKE_CURRENT_LIST_DIR}/static/@PROJECT_NAME@-targets.cmake)
-endif()
+include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-targets.cmake)
 
