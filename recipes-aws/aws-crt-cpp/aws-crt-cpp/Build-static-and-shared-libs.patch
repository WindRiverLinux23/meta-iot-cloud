From 400e0471418c4dde264a1ae4a225f520a2207d79 Mon Sep 17 00:00:00 2001
From: Scott Ware <scott.r.ware@intel.com>
Date: Thu, 20 May 2021 12:39:11 +0100
Subject: [PATCH] Build static and shared libs

Signed-off-by: Scott Ware <scott.r.ware@intel.com>
---
 CMakeLists.txt | 32 ++++++++++++++++++++------------
 1 file changed, 20 insertions(+), 12 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4467049..5e11035 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -237,20 +237,22 @@ if (WIN32)
     endif ()
 endif()
 
-add_library(${PROJECT_NAME} ${AWS_CRT_CPP_HEADERS} ${AWS_CRT_CPP_SRC})
+add_library(${PROJECT_NAME} SHARED ${AWS_CRT_CPP_HEADERS} ${AWS_CRT_CPP_SRC})
+add_library(${PROJECT_NAME}_static STATIC ${AWS_CRT_CPP_HEADERS} ${AWS_CRT_CPP_SRC})
 
 target_compile_definitions(${PROJECT_NAME} PRIVATE -DCJSON_HIDE_SYMBOLS)
+target_compile_definitions(${PROJECT_NAME}_static PRIVATE -DCJSON_HIDE_SYMBOLS)
 
-if (BUILD_SHARED_LIBS)
-    target_compile_definitions(${PROJECT_NAME} PUBLIC -DAWS_CRT_CPP_USE_IMPORT_EXPORT)
-    target_compile_definitions(${PROJECT_NAME} PRIVATE -DAWS_CRT_CPP_EXPORTS)
-endif()
+target_compile_definitions(${PROJECT_NAME} PUBLIC -DAWS_CRT_CPP_USE_IMPORT_EXPORT)
+target_compile_definitions(${PROJECT_NAME} PRIVATE -DAWS_CRT_CPP_EXPORTS)
 
 set_target_properties(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE CXX)
 set_target_properties(${PROJECT_NAME} PROPERTIES CXX_STANDARD ${CMAKE_CXX_STANDARD})
 set_target_properties(${PROJECT_NAME} PROPERTIES VERSION 1.0.0)
+set_target_properties(${PROJECT_NAME}_static PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
 
 aws_prepare_symbol_visibility_args(${PROJECT_NAME} "AWS_CRT_CPP")
+aws_prepare_symbol_visibility_args(${PROJECT_NAME}_static "AWS_CRT_CPP")
 
 #set runtime library
 if (MSVC)
@@ -268,12 +270,16 @@ if (CMAKE_BUILD_TYPE STREQUAL "" OR CMAKE_BUILD_TYPE MATCHES Debug)
         target_compile_options(${PROJECT_NAME} PRIVATE /W4 /WX /wd4068)
     else ()
         target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wno-long-long -pedantic -Werror)
+        target_compile_options(${PROJECT_NAME}_static PRIVATE -Wall -Wno-long-long -pedantic -Werror)
     endif ()
 endif ()
 
 target_include_directories(${PROJECT_NAME} PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
         $<INSTALL_INTERFACE:include>)
+target_include_directories(${PROJECT_NAME}_static PUBLIC
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+        $<INSTALL_INTERFACE:include>)
 
 aws_use_package(aws-c-http)
 aws_use_package(aws-c-mqtt)
@@ -285,6 +291,7 @@ aws_use_package(aws-checksums)
 aws_use_package(aws-c-event-stream)
 
 target_link_libraries(${PROJECT_NAME} ${DEP_AWS_LIBS})
+target_link_libraries(${PROJECT_NAME}_static ${DEP_AWS_LIBS})
 
 install(FILES ${AWS_CRT_HEADERS} DESTINATION "include/aws/crt" COMPONENT Development)
 install(FILES ${AWS_CRT_AUTH_HEADERS} DESTINATION "include/aws/crt/auth" COMPONENT Development)
@@ -301,15 +308,16 @@ install(
         LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT Development
         RUNTIME DESTINATION bin COMPONENT Runtime
 )
-
-if (BUILD_SHARED_LIBS)
-    set (TARGET_DIR "shared")
-else()
-    set (TARGET_DIR "static")
-endif()
+install(
+        TARGETS ${PROJECT_NAME}_static
+        EXPORT ${PROJECT_NAME}-targets
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT Development
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT Development
+        RUNTIME DESTINATION bin COMPONENT Runtime
+)
 
 install(EXPORT "${PROJECT_NAME}-targets"
-        DESTINATION "${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}/cmake/${TARGET_DIR}"
+        DESTINATION "${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}/cmake"
         NAMESPACE AWS::
         COMPONENT Development)
 
